// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	models "go-ads-management/models"

	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// AdsRepository is an autogenerated mock type for the AdsRepository type
type AdsRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: adsInput
func (_m *AdsRepository) Create(adsInput models.AdsInput) (models.Ads, error) {
	ret := _m.Called(adsInput)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 models.Ads
	var r1 error
	if rf, ok := ret.Get(0).(func(models.AdsInput) (models.Ads, error)); ok {
		return rf(adsInput)
	}
	if rf, ok := ret.Get(0).(func(models.AdsInput) models.Ads); ok {
		r0 = rf(adsInput)
	} else {
		r0 = ret.Get(0).(models.Ads)
	}

	if rf, ok := ret.Get(1).(func(models.AdsInput) error); ok {
		r1 = rf(adsInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *AdsRepository) Delete(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ForceDelete provides a mock function with given fields: id
func (_m *AdsRepository) ForceDelete(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ForceDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *AdsRepository) GetAll() (*gorm.DB, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 *gorm.DB
	var r1 error
	if rf, ok := ret.Get(0).(func() (*gorm.DB, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *AdsRepository) GetByID(id string) (models.Ads, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 models.Ads
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Ads, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.Ads); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Ads)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Restore provides a mock function with given fields: id
func (_m *AdsRepository) Restore(id string) (models.Ads, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Restore")
	}

	var r0 models.Ads
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Ads, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.Ads); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Ads)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: adsInput, id
func (_m *AdsRepository) Update(adsInput models.AdsInput, id string) (models.Ads, error) {
	ret := _m.Called(adsInput, id)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 models.Ads
	var r1 error
	if rf, ok := ret.Get(0).(func(models.AdsInput, string) (models.Ads, error)); ok {
		return rf(adsInput, id)
	}
	if rf, ok := ret.Get(0).(func(models.AdsInput, string) models.Ads); ok {
		r0 = rf(adsInput, id)
	} else {
		r0 = ret.Get(0).(models.Ads)
	}

	if rf, ok := ret.Get(1).(func(models.AdsInput, string) error); ok {
		r1 = rf(adsInput, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAdsRepository creates a new instance of AdsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AdsRepository {
	mock := &AdsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
